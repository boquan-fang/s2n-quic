on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run daily job at 8:00 PM PT
    - cron: '0 3 * * *'
  workflow_dispatch:

name: ci

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: 1
  # Pin the nightly toolchain to prevent breakage.
  # This should be occasionally updated.
  RUST_NIGHTLY_TOOLCHAIN: nightly-2025-01-31
  CDN: https://dnglbrstg7yg.cloudfront.net
  # enable unstable features for testing
  S2N_UNSTABLE_CRYPTO_OPT_TX: 100
  S2N_UNSTABLE_CRYPTO_OPT_RX: 100
  CI_ARTIFACTS_BUCKET: s2n-quic-ci-artifacts

# By default depandabot only receives read permissions. Explicitly give it write
# permissions which is needed by the ouzi-dev/commit-status-updater task.
#
# Updating status is relatively safe (doesnt modify source code) and caution
# should we taken before adding more permissions.
permissions:
  statuses: write
  id-token: write # This is required for requesting the JWT/OIDC
  contents: write
  pull-requests: write

jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      rust-versions: ${{ steps.definitions.outputs.versions }}
      msrv: ${{ steps.definitions.outputs.msrv }}
      examples: ${{ steps.definitions.outputs.examples }}
      crates: ${{ steps.definitions.outputs.crates }}
      workspaces:  ${{ steps.definitions.outputs.workspaces }}
    steps:
      - uses: actions/checkout@v5
      # examples is populated by
      # find all child folders in the examples directory
      # jq -R - raw content is passed in (not json, just strings)
      # jq -s - slurp the content into an object
      # jq '. += ' adds the s2n-quic-xdp and s2n-quic-dc crates to the list of crates we build
      # Many of the xdp crates have much more complex build processes, so we
      # don't try to build all of them.
      # jq -c - output the object in (c)ompact mode on a single line, github
      # will fail to parse multi line output
      #
      # the output is echo'd to make debugging easier
      - name: Evaluate definitions
        id: definitions
        run: |
          rustup show active-toolchain
          export MSRV=$(rustup show active-toolchain | awk -F'-' '{print $1}')
          if [ -z "$MSRV" ]; then
            echo "Error: MSRV did not parse correctly"
            exit 1
          fi
          echo "msrv=$MSRV"
          echo "msrv=$MSRV" >> $GITHUB_OUTPUT
          export RAW_VERSIONS="stable beta $MSRV"
          export VERSIONS=$(echo $RAW_VERSIONS | jq -scR 'rtrimstr("\n")|split(" ")|.')
          echo "versions=$VERSIONS"
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT
          export EXAMPLES=$(find examples/ -maxdepth 1 -mindepth 1 -type d | jq -R | jq -sc)
          echo "examples=$EXAMPLES"
          echo "examples=$EXAMPLES" >> $GITHUB_OUTPUT
          export CRATES=$(find quic common -name *Cargo.toml | jq -R | jq -s | jq '. += ["tools/xdp/s2n-quic-xdp/Cargo.toml","dc/s2n-quic-dc/Cargo.toml"]' | jq -c)
          echo "crates=$CRATES"
          echo "crates=$CRATES" >> $GITHUB_OUTPUT
          export WORKSPACES=$(find . -maxdepth 4 -name Cargo.toml -not -path './tools/xdp/ebpf/*' -exec grep -l '^\[workspace\]'  {} \; | xargs -n1 dirname | sort | jq -R | jq -sc)
          echo "workspaces=$WORKSPACES"
          echo "workspaces=$WORKSPACES" >> $GITHUB_OUTPUT

  clippy:
    runs-on: ubuntu-latest
    needs: env
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true

      - name: Install rust toolchain
        id: toolchain
        run: |
          rustup toolchain install beta --profile minimal --component clippy
          rustup override set beta

      - uses: camshaft/rust-cache@v1

      # TODO translate json reports to in-action warnings
      - name: Run cargo clippy on all workspaces
        run: |
          # Clippy bot only runs on workflow_dispatch event
          CLIPPY_FIX_FLAG=""
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            CLIPPY_FIX_FLAG='--fix --allow-dirty'
          fi

          cargo clippy --all-features --all-targets --workspace $CLIPPY_FIX_FLAG -- -D warnings


      - name: Create clippy pull request
        if: github.event_name == 'workflow_dispatch'
        uses: peter-evans/create-pull-request@v7
        with:
          title: 'chore: clippy lint updates'
          body: |
            ## Description of Change
            Apply new clippy lints requirements to the s2n-quic codebase.
